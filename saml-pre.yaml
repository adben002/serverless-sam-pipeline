AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless website
Resources:
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !FindInMap [ Constants, InstanceValues, DomainName ]
  RecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: HostedZone
    Properties:
      Name: !FindInMap [ Constants, InstanceValues, DomainName ]
      HostedZoneName:
        Fn::Join:
          - ''
          - - !FindInMap [ Constants, InstanceValues, DomainName ]
            - '.'
      Type: A
      AliasTarget:
        DNSName: !GetAtt [ CloudFront, DomainName ]
        HostedZoneId: Z2FDTNDATAQYW2
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !FindInMap [ Constants, InstanceValues, DomainName ]
        PriceClass: PriceClass_All
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !FindInMap [ Constants, InstanceValues, CertArn ]
          SslSupportMethod: sni-only
        Origins:
          -
            Id: S3-Website
            DomainName:
              Fn::Join:
                - ''
                -
                  - !FindInMap [ Constants, InstanceValues, DomainName ]
                  - '.s3-website.'
                  - !Ref "AWS::Region"
                  - '.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          -
            Id: Api-Gateway
            DomainName:
              Fn::Join:
                - ''
                -
                  - 'sadsad'
                  - Fn::Join:
                      - ''
                      -
                        - '.execute-api.'
                        - !Ref "AWS::Region"
                        - '.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
                - TLSv1.1
                - TLSv1
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3-Website
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          -
            PathPattern: '/api/*'
            Compress: true
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: Api-Gateway
            ForwardedValues:
              QueryString: true
              Headers:
                - Accept
                - Accept-Charset
                - Accept-Datetime
                - Accept-Language
                - Authorization
                - authorizationToken
                - Origin
                - Referer
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
        Enabled: true
  Cognito:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !FindInMap [ Constants, InstanceValues, Name ]
      AutoVerifiedAttributes:
        - email
      Schema:
        -
          Name: email
          Required: true
  PoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !FindInMap [ Constants, InstanceValues, Name ]
      UserPoolId:
        Ref: Cognito
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !FindInMap [ Constants, InstanceValues, Name ]
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        -
          ClientId:
            Ref: PoolClient
          ProviderName:
            Fn::Join:
              - ''
              - - 'cognito-idp.'
                - !Ref "AWS::Region"
                - '.amazonaws.com/'
                - Ref: Cognito
  Dynamodb:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: key
          AttributeType: S
      KeySchema:
        -
          AttributeName: key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: serverlessValues
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [ Constants, InstanceValues, DomainName ]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  SampleBucketPolicy: 
    Type: "AWS::S3::BucketPolicy"
    Properties: 
      Bucket:
        Ref: "S3Bucket"
      PolicyDocument:
        Statement:
          -
            Sid: "PublicReadGetObject"
            Effect: "Allow"
            Principal: "*"
            Action:
              - "s3:GetObject"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:aws:s3:::"
                  -
                    Ref: "S3Bucket"
                  - "/*"
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - ''
          -
            - !Ref "AWS::Region"
            - '-authRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
  UnAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - ''
          -
            - !Ref "AWS::Region"
            - '-unAuthRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated: !GetAtt [ AuthRole, Arn ]
        unauthenticated: !GetAtt [ UnAuthRole, Arn ]
  AuthorizerFunction:
    Type: AWS::Lambda::Function
    DependsOn: Cognito
    Properties:
      FunctionName: authorizer
      Runtime: nodejs6.10
      Handler: ./service/authorizer.handler
      Environment:
        userPoolId: !Ref Cognito
        region: !Ref AWS::Region
      MemorySize: 128
      Timeout: 10
