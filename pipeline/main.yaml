AWSTemplateFormatVersion: "2010-09-09"
Description: "Main template for a CI/CD Serverless application."
Parameters:
  AppName:
    Type: String
    Description: Name of the application.
    MinLength: "1"
    MaxLength: "80"
    AllowedPattern: "[A-Za-z0-9-]+"
    ConstraintDescription: Malformed input parameter. AppName must only contain upper and lower case letters, numbers, and -.
    Default: serverless
  CodeBuildImage:
    Type: String
    Default: "aws/codebuild/nodejs:7.0.0"
    Description: Image used for CodeBuild project.
  GitHubRepoName:
    Type: String
    Description: The GitHub repo name, e.g. serverless-sam-pipeline
  GitHubRepoBranch:
    Type: String
    Description: The GitHub repo branch code pipelines should watch for changes on
    Default: master
  GitHubUser:
    Type: String
    Description: GitHub UserName. This username must have access to the GitHubToken.
  GitHubToken:
    NoEcho: true
    Type: String
    Description: "Secret. OAuthToken with access to Repo. Long string of characters and digits. Go to https://github.com/settings/tokens"
  DomainName:
    Type: String
    Description: Domain name of website
  CertArn:
    Type: String
    Description: https certificate arn

Resources:

  CodeBuildTrustRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-codebuild-role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  CodeBuildRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CodeBuildTrustRole
    Description: Setting IAM policy for the service role for AWS CodeBuild
    Properties:
      PolicyName: CodeBuildRolePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
          Resource: ["*"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["s3:*"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["kms:GenerateDataKey*", "kms:Encrypt", "kms:Decrypt"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["sns:SendMessage"]
      Roles: [!Ref CodeBuildTrustRole]
  CloudFormationTrustRole:
    Description: Creating service role in IAM for AWS CloudFormation
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-cloudformation-role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  CloudFormationRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CloudFormationTrustRole
    Description: Setting IAM policy for the service role for AWS CloudFormation
    Properties:
      PolicyName: CloudFormationRolePolicy
      PolicyDocument:
        Statement:
        - Action: ["s3:GetObject", "s3:GetObjectVersion", "s3:GetBucketVersioning", "s3:CreateBucket", "s3:PutObject", "s3:ListBucket", "s3:DeleteObject", "s3:DeleteBucket", "s3:ListBucketVersions", "s3:PutBucketAcl", "s3:PutBucketWebsite", "s3:DeleteBucketWebsite", "s3:PutBucketPolicy", "s3:DeleteBucketPolicy"]
          Resource: "*"
          Effect: Allow
        - Action: ["s3:PutObject"]
          Resource: ["arn:aws:s3:::codepipeline*"]
          Effect: Allow
        - Action: ["lambda:*"]
          Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          Effect: Allow
        - Action: ["apigateway:*"]
          Resource: !Sub "arn:aws:apigateway:${AWS::Region}::*"
          Effect: Allow
        - Action: ["iam:GetRole", "iam:CreateRole", "iam:DeleteRole"]
          Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AppName}-*"
          Effect: Allow
        - Action: ["iam:AttachRolePolicy", "iam:DetachRolePolicy"]
          Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${AppName}-*"
          Effect: Allow
        - Action: ["iam:PassRole", "iam:GetRole", "iam:CreateRole", "iam:DeleteRole"]
          Resource: ["*"]
          Effect: Allow
        - Action: ["cloudformation:CreateChangeSet"]
          Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31"
          Effect: Allow
        - Action: ["route53:CreateHostedZone", "route53:GetChange", "route53:ListQueryLoggingConfigs", "route53:DeleteHostedZone", "route53:ListHostedZones", "route53:ChangeResourceRecordSets"]
          Resource: ["*"]
          Effect: Allow
        - Action: ["dynamodb:DescribeTable", "dynamodb:CreateTable"]
          Resource: ["*"]
          Effect: Allow
        - Action: ["dynamodb:CreateTable", "dynamodb:DeleteTable"]
          Resource: ["*"]
          Effect: Allow
        - Action: ["cognito-idp:CreateUserPool", "cognito-idp:DeleteUserPool", "cognito-idp:CreateUserPoolClient", "cognito-idp:DeleteUserPoolClient"]
          Resource: ["*"]
          Effect: Allow
        - Action: ["cloudfront:CreateDistribution", "cloudfront:TagResource", "cloudfront:GetDistribution", "cloudfront:UpdateDistribution", "cloudfront:DeleteDistribution"]
          Resource: ["*"]
          Effect: Allow
        - Action: ["cognito-identity:CreateIdentityPool", "cognito-identity:DeleteIdentityPool", "cognito-identity:SetIdentityPoolRoles", "cognito-identity:UpdateIdentityPool"]
          Resource: ["*"]
          Effect: Allow
      Roles: [!Ref CloudFormationTrustRole]
  CodePipelineTrustRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-codepipeline-role"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  CodePipelineRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CodePipelineTrustRole
    Description: Setting IAM policy for the service role for AWS CodePipeline
    Properties:
      PolicyName: CodePipelineRolePolicy
      PolicyDocument:
        Statement:
        - Action: ["s3:GetObject", "s3:GetObjectVersion", "s3:GetBucketVersioning"]
          Resource: "*"
          Effect: Allow
        - Action: ["s3:PutObject"]
          Resource: ["arn:aws:s3:::codepipeline*"]
          Effect: Allow
        - Action: ["codebuild:StartBuild", "codebuild:BatchGetBuilds"]
          Resource: "*"
          Effect: Allow
        - Action: ["cloudwatch:*", "s3:*", "sns:*", "cloudformation:*", "rds:*", "sqs:*", "iam:PassRole"]
          Resource: "*"
          Effect: Allow
        - Action: ["lambda:InvokeFunction", "lambda:ListFunctions"]
          Resource: "*"
          Effect: Allow
      Roles: [!Ref CodePipelineTrustRole]


  CodeBuildProject:
    DependsOn: [S3Bucket]
    Description: Creating AWS CodeBuild project
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub "Building stage for ${AppName}."
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref S3Bucket
          - Name: DomainName
            Value: !Sub "${DomainName}"
          - Name: Name
            Value: !Sub "${AppName}"
          - Name: CertArn
            Value: !Sub "${CertArn}"
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
      Name: !Sub "${AppName}-build"
      ServiceRole: !GetAtt CodeBuildTrustRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-build.yml
      Tags:
        - Key: app-name
          Value: !Ref AppName
      TimeoutInMinutes: 5
  CodeBuildDeployProject:
    DependsOn: [S3Bucket]
    Description: Creating AWS CodeBuild project
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub "Post deploy stage for ${AppName}."
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref S3Bucket
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
      Name: !Sub "${AppName}-post-deploy"
      ServiceRole: !GetAtt CodeBuildTrustRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-deploy.yml
      Tags:
        - Key: app-name
          Value: !Ref AppName
      TimeoutInMinutes: 5
  S3Bucket:
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "serverless-app-${AppName}-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
  S3ArtifactBucketPolicy:
    DependsOn: [S3Bucket]
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: SSEAndSSLPolicy
        Statement:
        - Sid: DenyInsecureConnections
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
  ProjectPipeline:
    DependsOn: [S3Bucket, CodeBuildProject, CodeBuildDeployProject]
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AppName}-pipeline"
      RoleArn: !GetAtt CodePipelineTrustRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: source
          InputArtifacts: []
          ActionTypeId:
            Version: "1"
            Category: Source
            Owner: ThirdParty
            Provider: GitHub
          OutputArtifacts:
          - Name: !Sub "${AppName}-SourceArtifact"
          Configuration:
            Repo: !Ref GitHubRepoName
            Branch: !Ref GitHubRepoBranch
            OAuthToken: !Ref GitHubToken
            Owner: !Ref GitHubUser
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: build-from-source
          InputArtifacts:
          - Name: !Sub "${AppName}-SourceArtifact"
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: "1"
            Provider: CodeBuild
          OutputArtifacts:
          - Name: !Sub "${AppName}-BuildArtifact"
          Configuration:
            ProjectName: !Sub "${AppName}-build"
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: create-changeset
          InputArtifacts:
          - Name: !Sub "${AppName}-BuildArtifact"
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: "1"
            Provider: CloudFormation
          OutputArtifacts: []
          Configuration:
            StackName: !Sub "${AppName}-serverless-stack"
            ActionMode: CHANGE_SET_REPLACE
            RoleArn: !GetAtt CloudFormationTrustRole.Arn
            ChangeSetName: pipeline-changeset
            Capabilities: CAPABILITY_NAMED_IAM
            TemplatePath: !Sub "${AppName}-BuildArtifact::post-saml.yaml"
          RunOrder: 1
        - Name: execute-changeset
          InputArtifacts: []
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: "1"
            Provider: CloudFormation
          OutputArtifacts: []
          Configuration:
            StackName: !Sub "${AppName}-serverless-stack"
            ActionMode: CHANGE_SET_EXECUTE
            ChangeSetName: pipeline-changeset
          RunOrder: 2
      - Name: PostDeploy
        Actions:
        - Name: build-from-source
          InputArtifacts:
          - Name: !Sub "${AppName}-SourceArtifact"
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: "1"
            Provider: CodeBuild
          OutputArtifacts:
          - Name: !Sub "${AppName}-PostDeployArtifact"
          Configuration:
            ProjectName: !Sub "${AppName}-post-deploy"
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
